// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Bot.Connector.Client.Models
{
    /// <summary> Indicates whether the bot is accepting, expecting, or ignoring input. </summary>
    public readonly partial struct InputHints : IEquatable<InputHints>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="InputHints"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InputHints(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AcceptingInputValue = "acceptingInput";
        private const string IgnoringInputValue = "ignoringInput";
        private const string ExpectingInputValue = "expectingInput";

        /// <summary> acceptingInput. </summary>
        public static InputHints AcceptingInput { get; } = new InputHints(AcceptingInputValue);
        /// <summary> ignoringInput. </summary>
        public static InputHints IgnoringInput { get; } = new InputHints(IgnoringInputValue);
        /// <summary> expectingInput. </summary>
        public static InputHints ExpectingInput { get; } = new InputHints(ExpectingInputValue);
        /// <summary> Determines if two <see cref="InputHints"/> values are the same. </summary>
        public static bool operator ==(InputHints left, InputHints right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InputHints"/> values are not the same. </summary>
        public static bool operator !=(InputHints left, InputHints right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="InputHints"/>. </summary>
        public static implicit operator InputHints(string value) => new InputHints(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InputHints other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InputHints other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
