// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Bot.Connector.Client.Models
{
    /// <summary> Indicates whether the semantic action is starting, continuing, or done. </summary>
    public readonly partial struct SemanticActionStates : IEquatable<SemanticActionStates>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="SemanticActionStates"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SemanticActionStates(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StartValue = "start";
        private const string ContinueValue = "continue";
        private const string DoneValue = "done";

        /// <summary> start. </summary>
        public static SemanticActionStates Start { get; } = new SemanticActionStates(StartValue);
        /// <summary> continue. </summary>
        public static SemanticActionStates Continue { get; } = new SemanticActionStates(ContinueValue);
        /// <summary> done. </summary>
        public static SemanticActionStates Done { get; } = new SemanticActionStates(DoneValue);
        /// <summary> Determines if two <see cref="SemanticActionStates"/> values are the same. </summary>
        public static bool operator ==(SemanticActionStates left, SemanticActionStates right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SemanticActionStates"/> values are not the same. </summary>
        public static bool operator !=(SemanticActionStates left, SemanticActionStates right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SemanticActionStates"/>. </summary>
        public static implicit operator SemanticActionStates(string value) => new SemanticActionStates(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SemanticActionStates other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SemanticActionStates other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
