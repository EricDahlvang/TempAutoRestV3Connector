// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Bot.Connector.Client.Models
{
    /// <summary> Role of the entity behind the account (Example: User, Bot, Skill, etc.). </summary>
    public readonly partial struct RoleTypes : IEquatable<RoleTypes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="RoleTypes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RoleTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UserValue = "user";
        private const string BotValue = "bot";
        private const string SkillValue = "skill";

        /// <summary> user. </summary>
        public static RoleTypes User { get; } = new RoleTypes(UserValue);
        /// <summary> bot. </summary>
        public static RoleTypes Bot { get; } = new RoleTypes(BotValue);
        /// <summary> skill. </summary>
        public static RoleTypes Skill { get; } = new RoleTypes(SkillValue);
        /// <summary> Determines if two <see cref="RoleTypes"/> values are the same. </summary>
        public static bool operator ==(RoleTypes left, RoleTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RoleTypes"/> values are not the same. </summary>
        public static bool operator !=(RoleTypes left, RoleTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RoleTypes"/>. </summary>
        public static implicit operator RoleTypes(string value) => new RoleTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RoleTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RoleTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
