// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Bot.Connector.Client.Models
{
    /// <summary> Defines the importance of an Activity. </summary>
    public readonly partial struct ActivityImportance : IEquatable<ActivityImportance>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ActivityImportance"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ActivityImportance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LowValue = "low";
        private const string NormalValue = "normal";
        private const string HighValue = "high";

        /// <summary> low. </summary>
        public static ActivityImportance Low { get; } = new ActivityImportance(LowValue);
        /// <summary> normal. </summary>
        public static ActivityImportance Normal { get; } = new ActivityImportance(NormalValue);
        /// <summary> high. </summary>
        public static ActivityImportance High { get; } = new ActivityImportance(HighValue);
        /// <summary> Determines if two <see cref="ActivityImportance"/> values are the same. </summary>
        public static bool operator ==(ActivityImportance left, ActivityImportance right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ActivityImportance"/> values are not the same. </summary>
        public static bool operator !=(ActivityImportance left, ActivityImportance right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ActivityImportance"/>. </summary>
        public static implicit operator ActivityImportance(string value) => new ActivityImportance(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ActivityImportance other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ActivityImportance other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
