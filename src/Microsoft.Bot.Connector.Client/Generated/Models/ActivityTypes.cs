// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Bot.Connector.Client.Models
{
    /// <summary> Types of Activities. </summary>
    public readonly partial struct ActivityTypes : IEquatable<ActivityTypes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ActivityTypes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ActivityTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MessageValue = "message";
        private const string ContactRelationUpdateValue = "contactRelationUpdate";
        private const string ConversationUpdateValue = "conversationUpdate";
        private const string TypingValue = "typing";
        private const string EndOfConversationValue = "endOfConversation";
        private const string EventValue = "event";
        private const string InvokeValue = "invoke";
        private const string DeleteUserDataValue = "deleteUserData";
        private const string MessageUpdateValue = "messageUpdate";
        private const string MessageDeleteValue = "messageDelete";
        private const string InstallationUpdateValue = "installationUpdate";
        private const string MessageReactionValue = "messageReaction";
        private const string SuggestionValue = "suggestion";
        private const string TraceValue = "trace";
        private const string HandoffValue = "handoff";

        /// <summary> message. </summary>
        public static ActivityTypes Message { get; } = new ActivityTypes(MessageValue);
        /// <summary> contactRelationUpdate. </summary>
        public static ActivityTypes ContactRelationUpdate { get; } = new ActivityTypes(ContactRelationUpdateValue);
        /// <summary> conversationUpdate. </summary>
        public static ActivityTypes ConversationUpdate { get; } = new ActivityTypes(ConversationUpdateValue);
        /// <summary> typing. </summary>
        public static ActivityTypes Typing { get; } = new ActivityTypes(TypingValue);
        /// <summary> endOfConversation. </summary>
        public static ActivityTypes EndOfConversation { get; } = new ActivityTypes(EndOfConversationValue);
        /// <summary> event. </summary>
        public static ActivityTypes Event { get; } = new ActivityTypes(EventValue);
        /// <summary> invoke. </summary>
        public static ActivityTypes Invoke { get; } = new ActivityTypes(InvokeValue);
        /// <summary> deleteUserData. </summary>
        public static ActivityTypes DeleteUserData { get; } = new ActivityTypes(DeleteUserDataValue);
        /// <summary> messageUpdate. </summary>
        public static ActivityTypes MessageUpdate { get; } = new ActivityTypes(MessageUpdateValue);
        /// <summary> messageDelete. </summary>
        public static ActivityTypes MessageDelete { get; } = new ActivityTypes(MessageDeleteValue);
        /// <summary> installationUpdate. </summary>
        public static ActivityTypes InstallationUpdate { get; } = new ActivityTypes(InstallationUpdateValue);
        /// <summary> messageReaction. </summary>
        public static ActivityTypes MessageReaction { get; } = new ActivityTypes(MessageReactionValue);
        /// <summary> suggestion. </summary>
        public static ActivityTypes Suggestion { get; } = new ActivityTypes(SuggestionValue);
        /// <summary> trace. </summary>
        public static ActivityTypes Trace { get; } = new ActivityTypes(TraceValue);
        /// <summary> handoff. </summary>
        public static ActivityTypes Handoff { get; } = new ActivityTypes(HandoffValue);
        /// <summary> Determines if two <see cref="ActivityTypes"/> values are the same. </summary>
        public static bool operator ==(ActivityTypes left, ActivityTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ActivityTypes"/> values are not the same. </summary>
        public static bool operator !=(ActivityTypes left, ActivityTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ActivityTypes"/>. </summary>
        public static implicit operator ActivityTypes(string value) => new ActivityTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ActivityTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ActivityTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
