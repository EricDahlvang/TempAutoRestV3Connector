// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Bot.Connector.Client.Models;

namespace Microsoft.Bot.Connector.Client
{
    internal partial class UserTokenRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of UserTokenRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public UserTokenRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://botframework.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetTokenRequest(string userId, string connectionName, string channelId, string code)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/usertoken/GetToken", false);
            uri.AppendQuery("userId", userId, true);
            uri.AppendQuery("connectionName", connectionName, true);
            if (channelId != null)
            {
                uri.AppendQuery("channelId", channelId, true);
            }
            if (code != null)
            {
                uri.AppendQuery("code", code, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="connectionName"> The String to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="code"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> or <paramref name="connectionName"/> is null. </exception>
        public async Task<Response<TokenResponse>> GetTokenAsync(string userId, string connectionName, string channelId = null, string code = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (connectionName == null)
            {
                throw new ArgumentNullException(nameof(connectionName));
            }

            using var message = CreateGetTokenRequest(userId, connectionName, channelId, code);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    {
                        if (message.Response.ContentStream.Length > 0)
                        {
                            TokenResponse value = default;
                            using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                            value = TokenResponse.DeserializeTokenResponse(document.RootElement);
                            return Response.FromValue(value, message.Response);
                        }
                        else
                        {
                            return null as Response<TokenResponse>;
                        }
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="connectionName"> The String to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="code"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> or <paramref name="connectionName"/> is null. </exception>
        public Response<TokenResponse> GetToken(string userId, string connectionName, string channelId = null, string code = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (connectionName == null)
            {
                throw new ArgumentNullException(nameof(connectionName));
            }

            using var message = CreateGetTokenRequest(userId, connectionName, channelId, code);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    {
                        TokenResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TokenResponse.DeserializeTokenResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAadTokensRequest(string userId, string connectionName, AadResourceUrls aadResourceUrls, string channelId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/usertoken/GetAadTokens", false);
            uri.AppendQuery("userId", userId, true);
            uri.AppendQuery("connectionName", connectionName, true);
            if (channelId != null)
            {
                uri.AppendQuery("channelId", channelId, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(aadResourceUrls);
            request.Content = content;
            return message;
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="connectionName"> The String to use. </param>
        /// <param name="aadResourceUrls"> The AadResourceUrls to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/>, <paramref name="connectionName"/>, or <paramref name="aadResourceUrls"/> is null. </exception>
        public async Task<Response<IReadOnlyDictionary<string, TokenResponse>>> GetAadTokensAsync(string userId, string connectionName, AadResourceUrls aadResourceUrls, string channelId = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (connectionName == null)
            {
                throw new ArgumentNullException(nameof(connectionName));
            }
            if (aadResourceUrls == null)
            {
                throw new ArgumentNullException(nameof(aadResourceUrls));
            }

            using var message = CreateGetAadTokensRequest(userId, connectionName, aadResourceUrls, channelId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, TokenResponse> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        Dictionary<string, TokenResponse> dictionary = new Dictionary<string, TokenResponse>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, TokenResponse.DeserializeTokenResponse(property.Value));
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="connectionName"> The String to use. </param>
        /// <param name="aadResourceUrls"> The AadResourceUrls to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/>, <paramref name="connectionName"/>, or <paramref name="aadResourceUrls"/> is null. </exception>
        public Response<IReadOnlyDictionary<string, TokenResponse>> GetAadTokens(string userId, string connectionName, AadResourceUrls aadResourceUrls, string channelId = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (connectionName == null)
            {
                throw new ArgumentNullException(nameof(connectionName));
            }
            if (aadResourceUrls == null)
            {
                throw new ArgumentNullException(nameof(aadResourceUrls));
            }

            using var message = CreateGetAadTokensRequest(userId, connectionName, aadResourceUrls, channelId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyDictionary<string, TokenResponse> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        Dictionary<string, TokenResponse> dictionary = new Dictionary<string, TokenResponse>();
                        foreach (var property in document.RootElement.EnumerateObject())
                        {
                            dictionary.Add(property.Name, TokenResponse.DeserializeTokenResponse(property.Value));
                        }
                        value = dictionary;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSignOutRequest(string userId, string connectionName, string channelId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/usertoken/SignOut", false);
            uri.AppendQuery("userId", userId, true);
            if (connectionName != null)
            {
                uri.AppendQuery("connectionName", connectionName, true);
            }
            if (channelId != null)
            {
                uri.AppendQuery("channelId", channelId, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="connectionName"> The String to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public async Task<Response> SignOutAsync(string userId, string connectionName = null, string channelId = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateSignOutRequest(userId, connectionName, channelId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="connectionName"> The String to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public Response SignOut(string userId, string connectionName = null, string channelId = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateSignOutRequest(userId, connectionName, channelId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTokenStatusRequest(string userId, string channelId, string include)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/usertoken/GetTokenStatus", false);
            uri.AppendQuery("userId", userId, true);
            if (channelId != null)
            {
                uri.AppendQuery("channelId", channelId, true);
            }
            if (include != null)
            {
                uri.AppendQuery("include", include, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="include"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public async Task<Response<IReadOnlyList<TokenStatus>>> GetTokenStatusAsync(string userId, string channelId = null, string include = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetTokenStatusRequest(userId, channelId, include);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<TokenStatus> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<TokenStatus> array = new List<TokenStatus>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(TokenStatus.DeserializeTokenStatus(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="include"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public Response<IReadOnlyList<TokenStatus>> GetTokenStatus(string userId, string channelId = null, string include = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetTokenStatusRequest(userId, channelId, include);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<TokenStatus> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<TokenStatus> array = new List<TokenStatus>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(TokenStatus.DeserializeTokenStatus(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExchangeAsyncRequest(string userId, string connectionName, string channelId, TokenExchangeRequest exchangeRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/usertoken/exchange", false);
            uri.AppendQuery("userId", userId, true);
            uri.AppendQuery("connectionName", connectionName, true);
            uri.AppendQuery("channelId", channelId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(exchangeRequest);
            request.Content = content;
            return message;
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="connectionName"> The String to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="exchangeRequest"> The TokenExchangeRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/>, <paramref name="connectionName"/>, <paramref name="channelId"/>, or <paramref name="exchangeRequest"/> is null. </exception>
        public async Task<Response<object>> ExchangeAsyncAsync(string userId, string connectionName, string channelId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (connectionName == null)
            {
                throw new ArgumentNullException(nameof(connectionName));
            }
            if (channelId == null)
            {
                throw new ArgumentNullException(nameof(channelId));
            }
            if (exchangeRequest == null)
            {
                throw new ArgumentNullException(nameof(exchangeRequest));
            }

            using var message = CreateExchangeAsyncRequest(userId, connectionName, channelId, exchangeRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    {
                        TokenResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TokenResponse.DeserializeTokenResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ErrorResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ErrorResponse.DeserializeErrorResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="userId"> The String to use. </param>
        /// <param name="connectionName"> The String to use. </param>
        /// <param name="channelId"> The String to use. </param>
        /// <param name="exchangeRequest"> The TokenExchangeRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/>, <paramref name="connectionName"/>, <paramref name="channelId"/>, or <paramref name="exchangeRequest"/> is null. </exception>
        public Response<object> ExchangeAsync(string userId, string connectionName, string channelId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (connectionName == null)
            {
                throw new ArgumentNullException(nameof(connectionName));
            }
            if (channelId == null)
            {
                throw new ArgumentNullException(nameof(channelId));
            }
            if (exchangeRequest == null)
            {
                throw new ArgumentNullException(nameof(exchangeRequest));
            }

            using var message = CreateExchangeAsyncRequest(userId, connectionName, channelId, exchangeRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    {
                        TokenResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TokenResponse.DeserializeTokenResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ErrorResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ErrorResponse.DeserializeErrorResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
