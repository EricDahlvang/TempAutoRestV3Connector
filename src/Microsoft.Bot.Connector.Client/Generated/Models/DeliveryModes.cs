// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Bot.Connector.Client.Models
{
    /// <summary> Defines values for DeliveryModes. </summary>
    public readonly partial struct DeliveryModes : IEquatable<DeliveryModes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DeliveryModes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeliveryModes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NormalValue = "normal";
        private const string NotificationValue = "notification";
        private const string ExpectRepliesValue = "expectReplies";
        private const string EphemeralValue = "ephemeral";

        /// <summary> The mode value for normal delivery modes. </summary>
        public static DeliveryModes Normal { get; } = new DeliveryModes(NormalValue);
        /// <summary> The mode value for notification delivery modes. </summary>
        public static DeliveryModes Notification { get; } = new DeliveryModes(NotificationValue);
        /// <summary> The value for expected replies delivery modes. </summary>
        public static DeliveryModes ExpectReplies { get; } = new DeliveryModes(ExpectRepliesValue);
        /// <summary> The value for ephemeral delivery modes. </summary>
        public static DeliveryModes Ephemeral { get; } = new DeliveryModes(EphemeralValue);
        /// <summary> Determines if two <see cref="DeliveryModes"/> values are the same. </summary>
        public static bool operator ==(DeliveryModes left, DeliveryModes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeliveryModes"/> values are not the same. </summary>
        public static bool operator !=(DeliveryModes left, DeliveryModes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeliveryModes"/>. </summary>
        public static implicit operator DeliveryModes(string value) => new DeliveryModes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeliveryModes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeliveryModes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
