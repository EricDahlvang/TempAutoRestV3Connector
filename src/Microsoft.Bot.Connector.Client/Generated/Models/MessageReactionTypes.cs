// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Bot.Connector.Client.Models
{
    /// <summary> Message reaction types. </summary>
    public readonly partial struct MessageReactionTypes : IEquatable<MessageReactionTypes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="MessageReactionTypes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MessageReactionTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LikeValue = "like";
        private const string PlusOneValue = "plusOne";

        /// <summary> like. </summary>
        public static MessageReactionTypes Like { get; } = new MessageReactionTypes(LikeValue);
        /// <summary> plusOne. </summary>
        public static MessageReactionTypes PlusOne { get; } = new MessageReactionTypes(PlusOneValue);
        /// <summary> Determines if two <see cref="MessageReactionTypes"/> values are the same. </summary>
        public static bool operator ==(MessageReactionTypes left, MessageReactionTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MessageReactionTypes"/> values are not the same. </summary>
        public static bool operator !=(MessageReactionTypes left, MessageReactionTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MessageReactionTypes"/>. </summary>
        public static implicit operator MessageReactionTypes(string value) => new MessageReactionTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MessageReactionTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MessageReactionTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
