// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Bot.Connector.Client.Models
{
    /// <summary> Text format types. </summary>
    public readonly partial struct TextFormatTypes : IEquatable<TextFormatTypes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TextFormatTypes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TextFormatTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MarkdownValue = "markdown";
        private const string PlainValue = "plain";
        private const string XmlValue = "xml";

        /// <summary> markdown. </summary>
        public static TextFormatTypes Markdown { get; } = new TextFormatTypes(MarkdownValue);
        /// <summary> plain. </summary>
        public static TextFormatTypes Plain { get; } = new TextFormatTypes(PlainValue);
        /// <summary> xml. </summary>
        public static TextFormatTypes Xml { get; } = new TextFormatTypes(XmlValue);
        /// <summary> Determines if two <see cref="TextFormatTypes"/> values are the same. </summary>
        public static bool operator ==(TextFormatTypes left, TextFormatTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TextFormatTypes"/> values are not the same. </summary>
        public static bool operator !=(TextFormatTypes left, TextFormatTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TextFormatTypes"/>. </summary>
        public static implicit operator TextFormatTypes(string value) => new TextFormatTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TextFormatTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TextFormatTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
