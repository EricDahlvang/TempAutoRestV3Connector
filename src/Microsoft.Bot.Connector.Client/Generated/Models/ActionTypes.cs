// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Bot.Connector.Client.Models
{
    /// <summary> Defines action types for clickable buttons. </summary>
    public readonly partial struct ActionTypes : IEquatable<ActionTypes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ActionTypes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ActionTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OpenUrlValue = "openUrl";
        private const string ImBackValue = "imBack";
        private const string PostBackValue = "postBack";
        private const string PlayAudioValue = "playAudio";
        private const string PlayVideoValue = "playVideo";
        private const string ShowImageValue = "showImage";
        private const string DownloadFileValue = "downloadFile";
        private const string SigninValue = "signin";
        private const string CallValue = "call";
        private const string MessageBackValue = "messageBack";

        /// <summary> openUrl. </summary>
        public static ActionTypes OpenUrl { get; } = new ActionTypes(OpenUrlValue);
        /// <summary> imBack. </summary>
        public static ActionTypes ImBack { get; } = new ActionTypes(ImBackValue);
        /// <summary> postBack. </summary>
        public static ActionTypes PostBack { get; } = new ActionTypes(PostBackValue);
        /// <summary> playAudio. </summary>
        public static ActionTypes PlayAudio { get; } = new ActionTypes(PlayAudioValue);
        /// <summary> playVideo. </summary>
        public static ActionTypes PlayVideo { get; } = new ActionTypes(PlayVideoValue);
        /// <summary> showImage. </summary>
        public static ActionTypes ShowImage { get; } = new ActionTypes(ShowImageValue);
        /// <summary> downloadFile. </summary>
        public static ActionTypes DownloadFile { get; } = new ActionTypes(DownloadFileValue);
        /// <summary> signin. </summary>
        public static ActionTypes Signin { get; } = new ActionTypes(SigninValue);
        /// <summary> call. </summary>
        public static ActionTypes Call { get; } = new ActionTypes(CallValue);
        /// <summary> messageBack. </summary>
        public static ActionTypes MessageBack { get; } = new ActionTypes(MessageBackValue);
        /// <summary> Determines if two <see cref="ActionTypes"/> values are the same. </summary>
        public static bool operator ==(ActionTypes left, ActionTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ActionTypes"/> values are not the same. </summary>
        public static bool operator !=(ActionTypes left, ActionTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ActionTypes"/>. </summary>
        public static implicit operator ActionTypes(string value) => new ActionTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ActionTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ActionTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
